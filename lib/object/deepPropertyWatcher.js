// Generated by CoffeeScript 1.6.2
(function() {
  var DeepPropertyWatcher, deepPropertyWatcher, dref, poolParty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dref = require("dref");

  poolParty = require("poolparty");

  DeepPropertyWatcher = (function() {
    /*
    */
    function DeepPropertyWatcher(options) {
      this.changed = __bind(this.changed, this);      this.reset(options);
    }

    /*
    */


    DeepPropertyWatcher.prototype.reset = function(options) {
      this._disposed = false;
      this.target = options.target;
      this.property = options.property;
      this.callback = options.callback;
      this._chain = this.property.split(".");
      return this._watch();
    };

    /*
    */


    DeepPropertyWatcher.prototype.dispose = function() {
      deepPropertyWatcher.add(this);
      return this._dispose();
    };

    /*
    */


    DeepPropertyWatcher.prototype._dispose = function() {
      var listener, _i, _len, _ref;

      if (this._listeners) {
        _ref = this._listeners;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          listener.dispose();
        }
        return this._listeners = void 0;
      }
    };

    /*
    */


    DeepPropertyWatcher.prototype._watch = function() {
      var i, part, property, value, _i, _len, _ref, _results;

      if (this._listeners) {
        this._dispose();
      }
      this._disposed = false;
      this._listeners = [];
      _ref = this._chain;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        part = _ref[i];
        property = this._chain.slice(0, i + 1).join(".");
        value = this.target.get(property);
        if (value && value.__isBindable) {
          this._listeners.push(deepPropertyWatcher.create({
            target: value,
            property: this._chain.slice(i + 1).join("."),
            callback: this.changed
          }));
        }
        _results.push(this._listeners.push(this.target.on("change:" + property, this.changed)));
      }
      return _results;
    };

    /*
    */


    DeepPropertyWatcher.prototype.changed = function() {
      this.callback();
      return this._watch();
    };

    return DeepPropertyWatcher;

  })();

  deepPropertyWatcher = module.exports = poolParty({
    max: 100,
    factory: function(options) {
      return new DeepPropertyWatcher(options);
    },
    recycle: function(watcher, options) {
      return watcher.reset(options);
    }
  });

}).call(this);
