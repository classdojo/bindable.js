// Generated by CoffeeScript 1.6.2
(function() {
  var PropertyWatcher, dref, poolParty, propertyWatcher, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dref = require("dref");

  poolParty = require("poolparty");

  type = require("type-component");

  PropertyWatcher = (function() {
    /*
    */
    function PropertyWatcher(options) {
      this._changed = __bind(this._changed, this);      this.reset(options);
    }

    /*
    */


    PropertyWatcher.prototype.reset = function(options) {
      if (options.property) {
        options.path = options.property.split(".");
      }
      this.index = options.index || 0;
      this._fullPath = options.path;
      this._path = this._fullPath.slice(0, this.index);
      this._property = this._path.join(".");
      this.target = options.target;
      this.callback = options.callback;
      this._children = [];
      if (this._property.substr(0, 1) === "@") {
        this._property = this._property.substr(1);
        this._callFn = true;
      }
      return this._watch();
    };

    /*
    */


    PropertyWatcher.prototype._dispose = function() {
      var child, _i, _len, _ref, _results;

      if (this._listener) {
        this._listener.dispose();
        this._listener = void 0;
      }
      _ref = this._children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.dispose();
        _results.push(this._children = []);
      }
      return _results;
    };

    /*
    */


    PropertyWatcher.prototype.dispose = function() {
      this._dispose();
      return propertyWatcher.add(this);
    };

    /*
    */


    PropertyWatcher.prototype.value = function() {
      var values;

      values = [];
      this._addValues(values);
      if (values.length === 1) {
        return values[0];
      } else {
        return values;
      }
    };

    /*
    */


    PropertyWatcher.prototype._addValues = function(values) {
      var child, _i, _len, _ref, _results;

      if (!this._children.length) {
        values.push(this._value);
      }
      _ref = this._children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(child._addValues(values));
      }
      return _results;
    };

    /*
    */


    PropertyWatcher.prototype._watch = function() {
      var value;

      if (this._property.length) {
        value = this.target.get(this._property);
        this._listener = this.target.on("change:" + this._property, this._changed);
      } else {
        value = this.target.get();
      }
      if (this._callFn) {
        return this._watchEachValue(value);
      } else {
        return this._watchValue(value);
      }
    };

    /*
    */


    PropertyWatcher.prototype._watchEachValue = function(fnOrArray) {
      var t;

      switch (t = type(fnOrArray)) {
        case "function":
          return this._callEach(fnOrArray);
        case "array":
          return this._loopEach(fnOrArray);
        default:
          throw Error("'@" + this._property + "' is a " + t + ". '@" + this._property + "' must be either an array, or function.");
      }
    };

    /*
     asynchronous
    */


    PropertyWatcher.prototype._callEach = function(fn) {
      var _this = this;

      return fn(function(value) {
        return _this._watchValue(value);
      });
    };

    /*
     synchronous
    */


    PropertyWatcher.prototype._loopEach = function(values) {
      var value, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        _results.push(this._watchValue(value));
      }
      return _results;
    };

    /*
    */


    PropertyWatcher.prototype._watchValue = function(value) {
      this._value = value;
      if (value && value.__isBindable) {
        return this._children.push(propertyWatcher.create({
          value: value,
          target: value,
          path: this._fullPath.slice(this.index),
          callback: this._changed
        }));
      } else if (this._path.length < this._fullPath.length) {
        return this._children.push(propertyWatcher.create({
          value: value,
          target: this.target,
          path: this._fullPath,
          callback: this.callback,
          index: this.index + 1
        }));
      } else if (!this._property.length) {
        return this._value = this.target;
      }
    };

    /*
    */


    PropertyWatcher.prototype._changed = function(value) {
      this._value = value;
      this._dispose();
      this._watch();
      return this.callback(value);
    };

    /*
    */


    PropertyWatcher.prototype._childValues = function() {
      var child, values, _i, _len, _ref;

      values = [];
      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        values.push(child);
      }
      return values;
    };

    return PropertyWatcher;

  })();

  propertyWatcher = module.exports = poolParty({
    max: 100,
    factory: function(options) {
      return new PropertyWatcher(options);
    },
    recycle: function(watcher, options) {
      return watcher.reset(options);
    }
  });

}).call(this);
