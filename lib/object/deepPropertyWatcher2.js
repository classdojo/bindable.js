// Generated by CoffeeScript 1.6.2
(function() {
  var PropertyWatcher, poolParty, propertyWatcher, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  poolParty = require("poolparty");

  type = require("type-component");

  PropertyWatcher = (function() {
    /*
    */
    function PropertyWatcher(options) {
      this._changed = __bind(this._changed, this);      this.reset(options);
    }

    /*
    */


    PropertyWatcher.prototype.reset = function(options) {
      this.target = options.target;
      this.watch = options.watch;
      this.path = options.path;
      this.index = options.index;
      this.root = options.root || this;
      this.property = this.path[this.index];
      this.callback = options.callback;
      this._children = [];
      this._listeners = [];
      this._value = void 0;
      this._watching = false;
      if (this._each = this.property.substr(0, 1) === "@") {
        this.property = this.property.substr(1);
      }
      return this._watch();
    };

    /*
    */


    PropertyWatcher.prototype.value = function() {
      var values;

      values = [];
      this._addValues(values);
      if (values.length > 1) {
        return values;
      } else {
        return values[0];
      }
    };

    /*
    */


    PropertyWatcher.prototype._addValues = function(values) {
      var child, _i, _len, _ref;

      if (!this._children.length) {
        values.push(this._value);
        return;
      }
      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child._addValues(values);
      }
      return void 0;
    };

    /*
    */


    PropertyWatcher.prototype._dispose = function() {
      var child, listener, _i, _j, _len, _len1, _ref, _ref1;

      _ref = this._listeners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        listener.dispose();
      }
      _ref1 = this._children;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        child = _ref1[_j];
        child.dispose();
      }
      this._children = [];
      return this._listeners = [];
    };

    /*
    */


    PropertyWatcher.prototype.dispose = function() {
      this._dispose();
      return propertyWatcher.add(this);
    };

    /*
    */


    PropertyWatcher.prototype._watch = function() {
      var event, events, nt, ref, t, value, _i, _j, _len, _len1, _ref;

      if (this.target) {
        if (this.target.__isBindable) {
          if ((nt = this.target.get()).__isBindable) {
            this.target = nt;
          }
          this.watch = this.target;
          this.childPath = this.path.slice(this.index);
          this.childIndex = 1;
          value = this.target.get(this.property);
        } else {
          value = this.target[this.property];
          this.childPath = this.path;
          this.childIndex = this.index + 1;
        }
      } else {
        this.childPath = this.path;
        this.childIndex = this.index + 1;
      }
      if (this._listeners.length) {
        this._dispose();
      }
      this._value = value;
      events = ["change:" + (this.childPath.slice(0, this.childIndex - 1).concat(this.property).join("."))];
      if (((t = type(value)) === "function") && value.refs) {
        _ref = value.refs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ref = _ref[_i];
          events.push("change:" + ref);
        }
      }
      for (_j = 0, _len1 = events.length; _j < _len1; _j++) {
        event = events[_j];
        this._listeners.push(this.watch.on(event, this._changed));
      }
      if (this._each) {
        return this._watchEachValue(value, t);
      } else {
        return this._watchValue(value);
      }
    };

    /*
    */


    PropertyWatcher.prototype._watchEachValue = function(fnOrArray, t) {
      switch (t) {
        case "function":
          return this._callEach(fnOrArray);
        case "array":
          return this._loopEach(fnOrArray);
        case "undefined":
          break;
        default:
          throw Error("'@" + this._property + "' is a " + t + ". '@" + this._property + "' must be either an array, or function.");
      }
    };

    /*
     asynchronous
    */


    PropertyWatcher.prototype._callEach = function(fn) {
      var _this = this;

      return fn.call(this.target, function(value) {
        return _this._watchValue(value);
      });
    };

    /*
     synchronous
    */


    PropertyWatcher.prototype._loopEach = function(values) {
      var value, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        _results.push(this._watchValue(value));
      }
      return _results;
    };

    /*
    */


    PropertyWatcher.prototype._watchValue = function(value) {
      if (this.childIndex < this.childPath.length) {
        return this._children.push(propertyWatcher.create({
          watch: this.watch,
          target: value,
          path: this.childPath,
          index: this.childIndex,
          callback: this.callback,
          root: this.root
        }));
      }
    };

    /*
    */


    PropertyWatcher.prototype._changed = function(_value) {
      this._value = _value;
      this.root._watch();
      return this.callback();
    };

    return PropertyWatcher;

  })();

  propertyWatcher = module.exports = poolParty({
    max: 100,
    factory: function(options) {
      return new PropertyWatcher(options);
    },
    recycle: function(watcher, options) {
      return watcher.reset(options);
    }
  });

}).call(this);
