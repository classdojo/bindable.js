// Generated by CoffeeScript 1.6.2
(function() {
  var BindableObject, Binding, EventEmitter, computed, dref, hoist, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dref = require("dref");

  Binding = require("./binding");

  EventEmitter = require("../core/eventEmitter");

  type = require("type-component");

  hoist = require("hoist");

  BindableObject = require("../object");

  computed = require("../utils/computed");

  /*
  */


  module.exports = (function(_super) {
    __extends(_Class, _super);

    /*
    */


    _Class.prototype.__isCollection = true;

    /*
    */


    function _Class(source, _id) {
      if (source == null) {
        source = [];
      }
      if (_id == null) {
        _id = "_id";
      }
      this.reset = __bind(this.reset, this);
      this.source = __bind(this.source, this);
      _Class.__super__.constructor.call(this, this);
      this._source = [];
      if (type(source) === "string") {
        _id = source;
        source = [];
      }
      this._length = 0;
      this._id(_id);
      this.__enforceId = false;
      this.reset(source);
    }

    /*
    */


    _Class.prototype.source = function(value) {
      if (!arguments.length) {
        return this._source;
      }
      return this.reset(value);
    };

    /*
    */


    _Class.prototype.reset = function(source) {
      if (!source) {
        source = [];
      }
      this.disposeSourceBinding();
      this._remove(this._source || []);
      if (source.__isCollection) {
        this._source = [];
        this._id(source._id());
        this._sourceBinding = source.bind().to(this).now();
        return this;
      }
      this._insert(this._source = source);
      this._resetInfo();
      return this;
    };

    /*
    */


    _Class.prototype.disposeSourceBinding = function() {
      if (this._sourceBinding) {
        this._sourceBinding.dispose();
        return this._sourceBinding = void 0;
      }
    };

    /*
    */


    _Class.prototype.bind = function(to) {
      if (type(to) === "string") {
        return _Class.__super__.bind.apply(this, arguments);
      }
      return new Binding(this).to(to);
    };

    /*
    */


    _Class.prototype.set = function(key, value) {
      var k;

      k = Number(key);
      if (isNaN(k)) {
        return _Class.__super__.set.apply(this, arguments);
      }
      return this.splice(k, value);
    };

    /*
    */


    _Class.prototype.get = function(key) {
      var k;

      k = Number(key);
      if (isNaN(k)) {
        return _Class.__super__.get.call(this, key);
      }
      return this.at(k);
    };

    /*
    */


    _Class.prototype.at = function(index) {
      return this._source[index];
    };

    /*
    */


    _Class.prototype.first = function() {
      return this._source[0];
    };

    /*
    */


    _Class.prototype.last = function() {
      return this._source[this._length - 1];
    };

    /*
    */


    _Class.prototype.remove = function(item) {
      var index;

      index = this.indexOf(item);
      if (!~index) {
        return false;
      }
      this.splice(index, 1);
      return true;
    };

    /*
    */


    _Class.prototype.filter = function(cb) {
      return this._source.filter(cb);
    };

    /*
    */


    _Class.prototype.each = computed("length", function(fn) {
      var item, _i, _len, _ref, _results;

      _ref = this._source;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(fn(item));
      }
      return _results;
    });

    /*
    */


    _Class.prototype.splice = function(index, count) {
      var args, remove;

      args = Array.prototype.slice.call(arguments);
      args.splice(0, 2);
      args = args;
      remove = this.slice(index, index + count);
      this._source.splice.apply(this._source, arguments);
      this._remove(remove, index);
      return this._insert(args, index);
    };

    /*
    */


    _Class.prototype.slice = function(start, end) {
      return this._source.slice(start, end);
    };

    /*
     deprecated
    */


    _Class.prototype.indexOf = function(searchItem) {
      return this.searchIndex(searchItem);
    };

    /*
    */


    _Class.prototype.update = function(item) {};

    /*
    */


    _Class.prototype.searchIndex = function(searchItem) {
      var i, item, _i, _len, _ref;

      _ref = this._source;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (this._get(item, this.__id) === this._get(searchItem, this.__id)) {
          return i;
        }
      }
      return -1;
    };

    /*
    */


    _Class.prototype._get = function(item, id) {
      var _ref;

      if (!item) {
        return void 0;
      }
      return (_ref = typeof item.get === "function" ? item.get(id) : void 0) != null ? _ref : item[id];
    };

    /*
    */


    _Class.prototype._id = function(key) {
      if (!arguments.length) {
        return this.__id;
      }
      if (this.__id === key) {
        return this;
      }
      this.__id = key;
      return this;
    };

    /*
    */


    _Class.prototype.push = function() {
      var items;

      items = Array.prototype.slice.call(arguments);
      this._source.push.apply(this._source, items);
      return this._insert(items, this._length);
    };

    /*
    */


    _Class.prototype.unshift = function() {
      var items;

      items = Array.prototype.slice.call(arguments);
      this._source.unshift.apply(this._source, items);
      return this._insert(items);
    };

    /*
    */


    _Class.prototype.toJSON = function() {
      var item, source, _i, _len, _ref;

      source = [];
      _ref = this._source;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        source.push((typeof item.toJSON === "function" ? item.toJSON() : void 0) || item);
      }
      return source;
    };

    /*
    */


    _Class.prototype.pop = function() {
      if (!this._source.length) {
        return;
      }
      return this._remove([this._source.pop()], this._length)[0];
    };

    /*
    */


    _Class.prototype.shift = function() {
      if (!this._source.length) {
        return;
      }
      return this._remove([this._source.shift()], 0)[0];
    };

    /*
    */


    _Class.prototype.enforceId = function(value) {
      if (!arguments.length) {
        return this.__enforceId;
      }
      return this.__enforceId = value;
    };

    /*
    */


    _Class.prototype._insert = function(items, start) {
      var i, item, _i, _len;

      if (start == null) {
        start = 0;
      }
      if (!items.length) {
        return;
      }
      this._length += items.length;
      this._resetInfo();
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        this.emit("insert", item, start + i);
      }
      return items;
    };

    /*
    */


    _Class.prototype._remove = function(items, start) {
      var i, item, _i, _len;

      if (start == null) {
        start = 0;
      }
      if (!items.length) {
        return;
      }
      this._length -= items.length;
      this._resetInfo();
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        this.emit("remove", item, start + i);
      }
      return items;
    };

    /*
    */


    _Class.prototype._resetInfo = function() {
      this.set("length", this._length);
      this.set("first", this.at(0));
      this.set("last", this.at(this.length - 1));
      return this.set("empty", !this._length);
    };

    return _Class;

  })(BindableObject);

}).call(this);
