// Generated by CoffeeScript 1.4.0
(function() {
  var Bindable, Binding, Builder, EventEmitter, Transformers, dref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dref = require("dref");

  EventEmitter = require("./core/eventEmitter");

  Binding = require("./binding");

  Builder = require("./builder");

  Transformers = require("./transformers");

  dref.use(require("./shim/dref"));

  module.exports = Bindable = (function(_super) {

    __extends(Bindable, _super);

    /*
    */


    function Bindable(data) {
      this.data = data != null ? data : {};
      Bindable.__super__.constructor.call(this);
      this._init();
    }

    /*
    */


    Bindable.prototype.get = function(key) {
      return this._ref(this.data, key) || this._ref(this, key);
    };

    /*
    */


    Bindable.prototype.has = function(key) {
      return !!this.get(key);
    };

    /*
    */


    Bindable.prototype.set = function(key, value) {
      var k, transformedValue;
      if (arguments.length === 1) {
        for (k in key) {
          this.set(k, key[k]);
        }
        return;
      }
      if (value && value.__isBinding) {
        value.to(this, key);
        return;
      }
      transformedValue = this._transform(key, value);
      dref.set(this.data, key, transformedValue);
      this.emit("change:" + key, transformedValue);
      this.emit("change", transformedValue);
      return this;
    };

    /*
    */


    Bindable.prototype.transform = function(key, transformer) {
      transformer = this._transformer().use(key, transformer);
      return this.set(key, transformer.set(this.get(key)));
    };

    /*
    */


    Bindable.prototype._ref = function(context, key) {
      if (!key) {
        return context;
      }
      return dref.get(context, key);
    };

    /*
    */


    Bindable.prototype._init = function() {
      var key, obj, _results;
      _results = [];
      for (key in this) {
        obj = this[key];
        if (obj && obj.__isCallChain) {
          this[key] = void 0;
          _results.push(obj.createObject(this, key));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
    */


    Bindable.prototype._transform = function(key, value, next) {
      if (!this.__transformer) {
        return value;
      }
      return this.__transformer.set(key, value);
    };

    /*
    */


    Bindable.prototype._transformer = function() {
      return this.__transformer || (this.__transformer = new Transformers(this));
    };

    /*
    */


    Bindable.prototype.bind = function(property, to) {
      if (to && to.__isBinding) {
        this.set(property, to);
        return;
      }
      return new Binding(this, property).to(to);
    };

    return Bindable;

  })(EventEmitter);

  new Builder(Binding, Bindable);

  module.exports.EventEmitter = EventEmitter;

}).call(this);
